# -*- coding: utf-8 -*-
"""Iris_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wdK-F79q8SAxpg2yhOMFz5285vSBiZSF

# IRIS FLOWER CLASIFICATION
"""

from google.colab import files
files.upload()

"""# UNDERSTANDING"""

# import modul yang diperlukan
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# baca data
data = pd.read_csv('IRIS.csv')

# tampilkan data
data.head()

# info data
data.info()

# deskripsi data
data.describe()

# ukuran data
data.shape

"""# VISUALISASI"""

# list nama kolom dalam data
data.columns

# nilai yang terdapat dalam kolom species
data['species'].unique()

# convert data kategorikal species ke numerik
data['species'] = data['species'].map( {'Iris-setosa': 1, 'Iris-versicolor': 2, 'Iris-virginica': 3} ).astype(int)

# tampilkan kolom species
data['species']

# recek data
data.head()

# list setiap nama kolom dalam data
index = data[['sepal_length', 'sepal_width', 'petal_length', 'petal_width',
       'species']]

# count plot setiap kolom data
for i in index.columns:
  sns.countplot(data[i])
  plt.title(i)
  plt.show()

# list setiap nama kolom dalam data
index = data[['sepal_length', 'sepal_width', 'petal_length', 'petal_width',
       'species']]

# Scatter plot 
for i in index.columns:
  plt.scatter(data['species'], data[i])
  plt.title(i)
  plt.show()

# list setiap nama kolom dalam data
index = data[['sepal_length', 'sepal_width', 'petal_length', 'petal_width',
       'species']]

# Scatter plot 
for i in index.columns:
  plt.hist(data[i])
  plt.title(i)
  plt.show()

"""### KORELASI"""

# korelasi data
data.corr()

# korelasi antara variabel dependen Survived dengan variabel inependen yang bertype numerik 'Age', 'SibSp', 'Parch', 'Fare'
corr = (data).corr().abs().unstack().sort_values(kind="quicksort", ascending=False).reset_index()
corr.rename(columns={"level_0": "Feature 1", "level_1": "Feature 2", 0: 'Correlation Coefficient'}, inplace=True)
corr[corr['Feature 1'] == 'species']

"""# DATA PREPARATION
Teentukan variabel terikat atau target dan variabel bebas atau features
"""

# species sebagai target
y = data.loc[:, 'species']

# semua kolom dari index 0 samoai index 3 = petal_width adalah features
X = data.loc[:, :'petal_width']

"""# MODELING"""

# import modul split data 
from sklearn.model_selection import train_test_split

"""#### Split data menjadi 20% data test dan 80% data train"""

# atur data split dengan 80% data train dan 20% data test
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.20, train_size=0.80, random_state=42)

# import modul model regresi linier logistik
from sklearn.linear_model import LogisticRegression

# fit data ke model
logistic_reg = LogisticRegression()
logistic_reg.fit(x_train, y_train)

# score hasil prediksi dengan menggunakan data testing
score = logistic_reg.score(x_test, y_test)
print('Score prediksi dengan menggunakan data test yaitu : ', score)

# score predksi dengan menggunakan data asli
score = logistic_reg.score(X, y)
print('Score prediksi yaitu : ', score)

"""#### OUTPUT"""

# copy target ke y
y_test['species'] = y
y

# save hasil
my_answer = y
my_answer = pd.DataFrame()

my_answer.to_csv("Answer.csv")